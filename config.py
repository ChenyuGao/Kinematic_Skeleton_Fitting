import numpy as np

'''
dofs:
0: pelvis_tx -> 0
1: pelvis_ty -> 0
2: pelvis_tz -> 0
3: pelvis_rx -> 0
4: pelvis_ry -> 0
5: pelvis_rz -> 0
6: right_hip_rx -> 1
7: right_hip_ry -> 1
8: right_hip_rz -> 1
9: right_knee_rx -> 2
10: left_hip_rx -> 4
11: left_hip_ry -> 4
12: left_hip_rz -> 4
13: left_knee_rx -> 5
14: spine_rx -> 7
15: spine_ry -> 7
16: spine_rz -> 7
17: neck_x -> 9
18: neck_y -> 9
19: neck_z -> 9
20: left_shoulder_rx -> 11
21: left_shoulder_ry -> 11
22: left_shoulder_rz -> 11
23: left_elbow_ry -> 12
24: right_shoulder_rx -> 14
25: right_shoulder_ry -> 14
26: right_shoulder_rz -> 14
27: right_elbow_ry -> 15
'''
dofs_limit = np.array([
    [-2.5, 1.4],    # 6
    [-0.1, 0.5],    # 7     [-0.8, 1.2]
    [-0.1, 0.6],    # 8     [-0.6, 0.6]
    [ 0.0, 2.5],    # 9
    [-2.5, 1.4],    # 10
    [-0.5, 0.1],    # 11    [-1.2, 0.8]
    [-0.6, 0.1],    # 12    [-0.6, 0.6]
    [ 0.0, 2.5],    # 13
    [ 0.0, 0.3],    # 14
    [-0.5, 0.5],    # 15    [-1.0, 1.0]
    [-0.1, 0.1],    # 16
    [-0.3, 0.3],    # 17    [-0.5, 0.5]
    [-0.2, 0.2],    # 18    [-0.667, 0.667]
    [-0.1, 0.1],    # 19    [-0.3, 0.3]
    [-0.5, 0.5],    # 20    [-1.0, 1.0]
    [-0.7, 2.0],    # 21
    [-1.4, 1.8],    # 22
    [ 0.0, 2.6],    # 23    [0.065, 2.7]
    [-0.5, 0.5],    # 24    [-1.0, 1.0]
    [-2.0, 0.7],    # 25
    [-1.8, 1.4],    # 26
    [-2.6, 0.0],    # 27    [-2.7, -0.065]
])
data_path = 'E:/Datasets/Human3.6m/processed/S11/WalkingDog-1/'
j17_parents = [-1, 0, 1, 2, 0, 4, 5, 0, 7, 8, 9, 8, 11, 12, 8, 14, 15]
# human forward to -z in right-handed coordinate system
# passive_marker_man 的初始 tpose 各节点3D坐标
passive_marker_man_tpose_j3d = np.array([[  0.        ,   0.        ,   0.        ],
                                         [ -9.63380134,   3.27329199,   0.        ],
                                         [ -9.64029234,  45.03542952,  -0.55685251],
                                         [ -9.63379952,  84.18255651,  -2.57603751],
                                         [  9.63379866,   3.27330101,   0.        ],
                                         [  9.62730693,  45.03545572,  -0.55539312],
                                         [  9.63380007,  84.18250635,  -2.57608716],
                                         [  0.00000397, -25.480301  ,   1.4115    ],
                                         [  0.00000397, -39.119904  ,   0.1192    ],
                                         [  0.00000397, -52.9973    ,  -4.234999  ],
                                         [  0.00000397, -57.023911  ,  -3.376499  ],
                                         [ 18.46330306, -48.19389392,  -5.4674999 ],
                                         [ 46.15030306, -48.19389392,  -5.4674999 ],
                                         [ 74.02410106, -48.19389392,  -5.4674999 ],
                                         [-18.46329494, -48.19389186,  -5.46749996],
                                         [-46.15029694, -48.19389186,  -5.46749996],
                                         [-74.02409894, -48.19389186,  -5.46749996]])
# kizunaai 的初始 xpose 各骨骼向量（读取自Unity，三个轴要全部取反），再进一步计算3D坐标
kizunaai_xpose_bone = np.array([[ 0.        ,  0.        ,  0.         ],
                                [-0.06449174, -0.1435949 , -0.009430826],
                                [ 0.01451249,  0.4104811 ,  0.008033648],
                                [-0.018279  , -0.3801752 ,  0.0483114  ],
                                [ 0.06449174,  0.1435949 ,  0.009430826],
                                [-0.01451249,  0.4104811 ,  0.008033648],
                                [ 0.018279  ,  0.3801752 ,  0.04831139 ],
                                [ 0.00000000, -0.00829422, -0.000233634],
                                [ 0.00000000, -0.1085985 ,  0.0114976  ],
                                [ 0.00000000, -0.1887372 ,  0.02135268 ],
                                [ 0.00000000, -0.05053024, -0.01235294 ],
                                [ 0.08227796, -0.14471049,  0.03586005 ],
                                [ 0.1853734 ,  0.1302562 ,  0.002883063],
                                [ 0.146788  ,  0.1145663 , -0.00576079 ],
                                [-0.08227796, -0.14471049,  0.03586005 ],
                                [-0.1853734 ,  0.1302562 ,  0.002883063],
                                [-0.146788  ,  0.1145663 , -0.00576079 ]]) * 100
# kizunaai_xpose_j3d = np.zeros((17, 3))
# kizunaai_xpose_j3d[[1, 4, 7]] = kizunaai_xpose_j3d[[0, 0, 0]] + kizunaai_xpose_bone[[1, 4, 7]]
# kizunaai_xpose_j3d[[2, 5, 8]] = kizunaai_xpose_j3d[[1, 4, 7]] + kizunaai_xpose_bone[[2, 5, 8]]
# kizunaai_xpose_j3d[[3, 6, 9, 11, 14]] = kizunaai_xpose_j3d[[2, 5, 8, 8, 8]] + kizunaai_xpose_bone[[3, 6, 9, 11, 14]]
# kizunaai_xpose_j3d[[10, 12, 15]] = kizunaai_xpose_j3d[[9, 11, 14]] + kizunaai_xpose_bone[[10, 12, 15]]
# kizunaai_xpose_j3d[[13, 16]] = kizunaai_xpose_j3d[[12, 15]] + kizunaai_xpose_bone[[13, 16]]
# kizunaai 的初始 xpose 各节点3D坐标
kizunaai_xpose_j3d = np.array([[  0.       ,   0.       ,   0.       ],
                               [ -6.449174 ,  14.35949  ,   0.9430826],
                               [ -4.997925 ,  55.4076   ,   1.7464474],
                               [ -6.825825 ,  93.42512  ,   6.5775874],
                               [  6.449174 ,  14.35949  ,   0.9430826],
                               [  4.997925 ,  55.4076   ,   1.7464474],
                               [  6.825825 ,  93.42512  ,   6.5775864],
                               [  0.       ,  -0.829422 ,  -0.0233634],
                               [  0.       , -11.689272 ,   1.1263966],
                               [  0.       , -30.562992 ,   3.2616646],
                               [  0.       , -35.616016 ,   2.0263706],
                               [  8.227796 , -26.160321 ,   4.7124016],
                               [ 26.765136 , -13.134701 ,   5.0007079],
                               [ 41.443936 ,  -1.678071 ,   4.4246289],
                               [ -8.227796 , -26.160321 ,   4.7124016],
                               [-26.765136 , -13.134701 ,   5.0007079],
                               [-41.443936 ,  -1.678071 ,   4.4246289]])

# -----------------------------------------config---------------------------------------------------------------
mixamo = False      # 若为 False 则选择爱酱模型进行骨架适配
input_tpose_j3d = kizunaai_xpose_j3d
use_lim, use_temp, use_filter = True, True, True
w_3d, w_2d, w_lim, w_temp = 1, 1e-5, 0.1, 0.1
all_eval_path = 'E:/Projects/Kinematic_Skeleton_Fitting/input/video3d_sbl_foot.valid.npz'

